# -*- coding: utf-8 -*-
"""OIBSIP(Car price prediction).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NucQcj0pM4rgWX_EBNETJ8IGXcKPHSh9
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Step 1: Load the dataset
url = "https://raw.githubusercontent.com/amankharwal/Website-data/master/CarPrice.csv"
df = pd.read_csv(url)

# Step 2: Explore and preprocess the data
# For simplicity, we will drop the car name as it does not contribute to the prediction.
df.drop('CarName', axis=1, inplace=True)

# Convert categorical variables to numerical using one-hot encoding
df = pd.get_dummies(df, drop_first=True)

# Step 3: Split the data into training and testing sets
X = df.drop('price', axis=1)
y = df['price']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 4: Scale the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Step 5: Choose a machine learning algorithm and train the model
model = LinearRegression()
model.fit(X_train_scaled, y_train)

# Step 6: Evaluate the model's performance
y_pred = model.predict(X_test_scaled)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print("Mean Squared Error:", mse)
print("R-squared:", r2)

# Step 7: Make predictions
new_car_features = {
    'symboling': 0,
    'fueltype_gas': 1,
    'aspiration_turbo': 0,
    'doornumber_two': 1,
    'carbody_convertible': 0,
    'carbody_hardtop': 1,
    'carbody_hatchback': 0,
    'carbody_sedan': 0,
    'carbody_wagon': 0,
    'drivewheel_fwd': 1,
    'drivewheel_rwd': 0,
    'enginelocation_rear': 0,
    'wheelbase': 100,
    'carlength': 170,
    'carwidth': 65,
    'carheight': 50,
    'curbweight': 2500,
    'enginetype_dohcv': 0,
    'enginetype_l': 0,
    'enginetype_ohc': 1,
    'enginetype_ohcf': 0,
    'enginetype_ohcv': 0,
    'enginetype_rotor': 0,
    'cylindernumber_five': 0,
    'cylindernumber_four': 1,
    'cylindernumber_six': 0,
    'cylindernumber_three': 0,
    'cylindernumber_twelve': 0,
    'cylindernumber_two': 0,
    'enginesize': 150,
    'fuelsystem_2bbl': 0,
    'fuelsystem_4bbl': 0,
    'fuelsystem_idi': 0,
    'fuelsystem_mfi': 0,
    'fuelsystem_mpfi': 1,
    'fuelsystem_spdi': 0,
    'fuelsystem_spfi': 0
}
new_car_df = pd.DataFrame([new_car_features])
new_car_df = new_car_df.reindex(columns=X.columns, fill_value=0)

new_car_scaled = scaler.transform(new_car_df)

predicted_price = model.predict(new_car_scaled)[0]
print("Predicted Price for the new car:", predicted_price)

# Step 8: Plot the distribution of the 'price' column
plt.figure(figsize=(8, 6))
plt.hist(df['price'], bins=20, color='skyblue', edgecolor='black')
plt.xlabel('Price')
plt.ylabel('Frequency')
plt.title('Distribution of Car Prices')
plt.show()

# Calculate the correlation matrix
corr_matrix = df.corr()

# Plot the correlation heatmap
plt.figure(figsize=(12, 8))
sns.clustermap(corr_matrix, cmap='coolwarm', linewidths=0.5, figsize=(10, 8))
plt.title('Correlation Heatmap')
plt.show()